# -*- coding: utf-8 -*-
"""Image classifiaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f8bW2viOmxf7iVpuhTo87q3fcxLd6_46
"""

#!unzip '/content/drive/MyDrive/Data Science/CV/cats and dogs.zip'

import numpy as np
import pandas as pd
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Rescaling
from tensorflow.keras.models import Sequential

# Extracting image from directory/folder
from tensorflow.keras.utils import image_dataset_from_directory

train_path = "/content/cats and dogs/train"
test_path = "/content/cats and dogs/test"

train_data = image_dataset_from_directory(
    directory = train_path,
    image_size=(180,180),
    batch_size = 32
)

test_data = image_dataset_from_directory(
    directory = test_path,
    image_size=(180,180),
    batch_size = 32
)

train_data.class_names

"""#Traning"""

model = Sequential()
model.add(Rescaling(1./255, input_shape=(180,180,3)))
model.add(Conv2D(16, (3,3), padding='same'))
model.add(MaxPooling2D())
model.add(Conv2D(64, (3,3), padding='same'))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(128,activation="relu"))
model.add(Dense(1, activation="sigmoid"))

model.compile(loss="binary_crossentropy",optimizer="adam", metrics=["accuracy"])

model.fit(train_data, validation_data=test_data,epochs=5)

"""#Trafer Learning"""

from tensorflow.keras.applications import VGG16

vgg16 = VGG16(weights='imagenet', include_top=False)
vgg16.summary()

model2 = Sequential()
model2.add(Rescaling(1./255, input_shape=(180, 180, 3)))
model2.add(vgg16)
model2.add(Flatten())
model2.add(Dense(128, activation="relu"))
model2.add(Dense(1, activation='sigmoid'))

vgg16.trainable = False

model2.compile(loss="binary_crossentropy",optimizer="adam", metrics=["accuracy"])
model2.fit(train_data, validation_data=test_data,epochs=5)

"""#Predict Image

"""

from tensorflow.keras.preprocessing import image

def predict_image(img_path):
  img = image.load_img(img_path, target_size=(180, 180))
  img_array = image.img_to_array(img)
  img_batch = np.expand_dims(img_array, axis=0)
  result = model2.predict(img_batch)
  if result >= 0.5:
    return "dog"
  else:
    return "cat"

predict_image("/content/cats and dogs/train/cats/cat.0.jpg")

predict_image("/content/cats and dogs/test/dogs/dog.1503.jpg")

predict_image("/content/cat.jpg")

"""#Save Model"""

# model2.save("cat_dog_classifier.h5")

# from google.colab import files
# files.download("/content/cat_dog_classifier.h5")
